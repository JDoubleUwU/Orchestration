"""
Django settings for myproject project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import environ
import os

# Initialize environ
env = environ.Env(
    # set casting, default value
    DEBUG=(bool, False)
)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

env_file_path = BASE_DIR / '.env'
if os.path.exists(env_file_path):
    environ.Env.read_env(env_file_path)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
#SECRET_KEY = 'django-insecure-p#a!4!@g((q1vqad8q^pkp%oekng4hhok5ezver3pllyj+fuax'
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
#DEBUG = True
DEBUG = env.bool('DEBUG') 

#ALLOWED_HOSTS = ['127.0.0.1']
ALLOWED_HOSTS = env.list('ALLOWED_HOSTS', default=[]) # Reads comma-separated string
#CSRF_TRUSTED_ORIGINS = env.list('CSRF_TRUSTED_ORIGINS', default=[]) # Reads comma-separated string

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'myapp',
    # Allauth apps
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    # ... add providers below, e.g.:
    'allauth.socialaccount.providers.google',

    'django.contrib.sites',
    'rest_framework',
    'drf_spectacular',

    'django_filters',
]

SITE_ID = 1 # Required by sites framework

ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = False # Or True, depending on your model needs
ACCOUNT_AUTHENTICATION_METHOD = 'email' # Or 'username' or 'username_email'
ACCOUNT_EMAIL_VERIFICATION = 'optional' # Or 'mandatory' or 'none'
LOGIN_REDIRECT_URL = '/' # URL to redirect to after login (e.g., home page)
ACCOUNT_LOGOUT_REDIRECT_URL = '/' # URL to redirect to after logout
# ACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = True # Optional
# ACCOUNT_SESSION_REMEMBER = True # Optional

SOCIALACCOUNT_PROVIDERS = {
            'google': {
                # For each OAuth based provider, either add a ``SocialApp``
                # (``socialaccount`` app) containing the required client
                # credentials, or list them here:
                'APP': {
                    'client_id': env('GOOGLE_CLIENT_ID'),
                    'secret': env('GOOGLE_CLIENT_SECRET'),
                    'key': '' # Keep empty
                },
                'SCOPE': [
                    'profile',
                    'email',
                ],
                'AUTH_PARAMS': {
                    'access_type': 'online',
                }
            }
        }

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        # Use SessionAuthentication to leverage Django's session framework
        # This works well when the API is used by the same web frontend
        'rest_framework.authentication.SessionAuthentication',
        # Include BasicAuthentication for simple username/password auth if needed,
        # but SessionAuthentication is primary for web browser interaction.
        # 'rest_framework.authentication.BasicAuthentication',
        # TokenAuthentication is another option for non-browser clients
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        # Require users to be authenticated for all API access by default
        'rest_framework.permissions.IsAuthenticated',
        # Alternatives:
        # 'rest_framework.permissions.IsAuthenticatedOrReadOnly' # Allows anonymous GET requests
        # 'rest_framework.permissions.AllowAny' # No restrictions (use carefully!)
    ],
    'DEFAULT_FILTER_BACKENDS': [
            'django_filters.rest_framework.DjangoFilterBackend',
            'rest_framework.filters.SearchFilter',
            'rest_framework.filters.OrderingFilter',
    ],
    # Optional: Default pagination settings
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 5,

    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}

SPECTACULAR_SETTINGS = {
    'TITLE': 'My API',
    'DESCRIPTION': 'API documentation',
    'VERSION': '1.0.0',
}

AUTHENTICATION_BACKENDS = [
            # Needed to login by username in Django admin, regardless of `allauth`
            'django.contrib.auth.backends.ModelBackend',

            # `allauth` specific authentication methods, such as login by e-mail
            'allauth.account.auth_backends.AuthenticationBackend',
        ]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
]

ROOT_URLCONF = 'myproject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'myproject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

'''
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}
'''


DATABASES = {
    'default': {
        'ENGINE': env('DB_ENGINE'),
        'NAME': env('DB_NAME'),
        'USER': env('DB_USER'),
        'PASSWORD': env('DB_PASSWORD'),
        'HOST': env('DB_HOST'),
        'PORT': env('DB_PORT'),
    }
}



'''
DATABASES = {
    # Raises ImproperlyConfigured exception if DATABASE_URL not in os.environ
    'default': env.db()
}
'''

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
